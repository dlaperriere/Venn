#!/usr/bin/env perl

=head1 Description

  test list2venn.pl

=head 2 Run test
 
  perl test_list2venn.pl
  prove test_list2venn.pl
  prove --formatter TAP::Formatter::JUnit test_list2venn.pl
  
=cut

use strict;
use warnings;

use IPC::Cmd qw[can_run run];
use FindBin qw($Bin);
require "$Bin/find_R.pl";
use Test::More 'no_plan';

my $verbose = 0;

## test R
my $R_path = &find_R();
my ( $r_ok, $r_err,$r_output ) = run( command => "$R_path --version", verbose => $verbose );
ok( $r_ok, "Can run R ($R_path)" );
if($r_ok){
	print STDERR "\n".join("",@$r_output)."\n";
}
## test Perl
my $Perl_path = "perl";
my ( $p_ok, $p_err ) = run( command => "$Perl_path --version", verbose => $verbose );
ok( $p_ok, "Can run perl ($Perl_path)" );

## test list2venn.pl
my $list_file   = "list_msigdb4.txt";
my $r_file      = "list_msigdb4.R";
my $result_file = "Rplots.pdf";

my ( $lv_ok, $lv_err ) =
  run( command => "$Perl_path $Bin/../list2venn.pl $list_file", verbose => $verbose );
ok( $lv_ok,     "Can run list2venn.pl " );
ok( -e $r_file, "R file created ($r_file)" );

my ( $lvr_ok, $lvr_err ) =
  run( command => "$R_path --no-save < $r_file", verbose => $verbose );
ok( $lvr_ok,          "Can run R file generated by list2venn.pl ($r_file)" );
ok( -e $result_file, "Result file created ($result_file)" );

# cleanup
unlink($r_file);
unlink($result_file);

done_testing();
